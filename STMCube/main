/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t borda[2]={0,0}; //Matrix 2x1 para alocar o valor de subida
uint32_t frequencia=0; //Variavel de amostra da frequencia
uint32_t frequenciaMedia=0;
uint32_t intensidade; //Intensidade das cores do RGB
uint8_t tmedido=0; //Variavel para o tempo medido
uint8_t msg[100]={"Medidas:"}; //Variavel que esta alocado uma mensagem

int aux=0, frequenciaSoma=0;
double vFreq=0;
//Expressões da equação para cálculo de temperatura em Kelvin
double A=0.00102192985237609;
double B=0.000241453242427025;
double C=0.000000247620754758454;
double D=0.000000165394923419592;
double LnR=0, temperaturaK;

uint32_t temperatura=0; //Temperatura em Celsius
uint32_t resis=0; // Resistencia atual do thermistor
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM5_Init();
  MX_TIM10_Init();
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim10); //Configurando os TIMs
HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); // Timer de captura
HAL_UART_Transmit(&huart2, msg, strlen(msg), 100); //Enviando informações pela serial
// Timers do RGB:
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(__HAL_TIM_GET_FLAG(&htim10,TIM_FLAG_UPDATE)) //Enviando o valor medido pela serial quando estoura TIM10
	  {
		  __HAL_TIM_GET_FLAG(&htim10,TIM_FLAG_UPDATE);

		  // Configuração dinâmica do pulso PWM do RGB:
		  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, intensidade); // VERMELHO
		  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (2999 - intensidade)); // AZUL

		  sprintf(msg,"temperatura : %lu C\r\n Frequencia: %lu Hz \n\n\r", temperatura,  frequencia); //EXIBIÇÃO SERIAL DA TEMPERATURA E FREQUENCIA
		  HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);

	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
